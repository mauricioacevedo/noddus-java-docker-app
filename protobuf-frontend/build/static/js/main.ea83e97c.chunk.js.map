{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","saveProto","bind","assertThisInitialized","state","status","event","_this2","preventDefault","form","target","data","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","elements","Symbol","iterator","next","done","element","value","tagName","name","err","return","address","host","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","then","res","json","res2","console","log","setState","catch","String","react_default","a","createElement","className","align","onSubmit","htmlFor","type","id","color","size","href","Component","App","src_Form_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea83e97c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Form.css';\r\n\r\nclass Form extends Component {\r\n\r\n    constructor () {\r\n        super();\r\n        this.saveProto = this.saveProto.bind(this);\r\n\r\n        this.state = {\r\n            status: \"Ready!\"\r\n        }\r\n    }\r\n\r\n    saveProto(event){\r\n        event.preventDefault();\r\n        const form = event.target;\r\n        const data = {}\r\n        for (let element of form.elements) {\r\n            if (element.tagName === 'BUTTON') { continue; }\r\n            data[element.name] = element.value;\r\n        }\r\n        \r\n        let address = data.host;\r\n\r\n        if(address === '') {\r\n            address = 'localhost';\r\n        }\r\n\r\n        fetch('http://'+address+':8080/create', {\r\n            method: 'post',\r\n            headers: {\r\n                'Accept': 'application/json, text/plain, */*',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        .then(res => res.json())\r\n        .then(res2 => {\r\n            console.log(res2);\r\n            this.setState({\r\n                status: res2.status\r\n            });\r\n        }).catch(err => {\r\n            console.log(err);\r\n            err = String(err);\r\n            this.setState({\r\n                status: err\r\n            });\r\n        });\r\n\r\n\r\n\r\n        //const stat = this.callBackend(data)\r\n\r\n    }\r\n\r\n    handleChange (event) {\r\n        this.setState( event.target.name =  event.target.value )\r\n    }\r\n\r\n    render () {\r\n    return (\r\n        <div>\r\n            <br /><br /><br />\r\n        <form className=\"container text-center\" align=\"center\" onSubmit={this.saveProto}>\r\n            <center>\r\n            <h1>Protobuf Form</h1>\r\n            </center>\r\n            <br /><br />\r\n        <div className=\"row\" align=\"center\">\r\n            <label htmlFor=\"id\" value>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Id: &nbsp;</label>\r\n            <input type=\"text\" name=\"id\" id=\"id\" />\r\n        </div>\r\n        \r\n        <div className=\"row\" align=\"center\">\r\n        <label htmlFor=\"id\">Name: &nbsp;</label>\r\n        <input type=\"text\" name=\"name\" id=\"name\"  />\r\n        </div>\r\n\r\n        <div align=\"center\">\r\n        <button type=\"submit\" className=\"btn btn-primary\">Save </button>\r\n        <br/><br/>\r\n\r\n        <div className=\"status-text\"> {this.state.status}</div>\r\n        </div>\r\n        <br/><br/>\r\n        <div className=\"row\" align=\"center\">\r\n        <label htmlFor=\"host\">Host: &nbsp;</label>\r\n        <input type=\"text\" name=\"host\" id=\"host\" />\r\n        </div>\r\n        <div className=\"row\" align=\"center\">\r\n        <label htmlFor=\"note\">Note: for a Docker Toolbox installation you must especify the VM IP address</label>\r\n        </div>\r\n        </form>\r\n        <footer className=\"navbar-fixed-bottom footer-color\">\r\n            <div className=\"container blue\">\r\n                <div className=\"row\">\r\n                    <p><font color=\"white\" size=\"4\">Mauricio Acevedo - <a href=\"https://www.linkedin.com/in/macevedg/\">LinkedIn</a> </font></p>\r\n                </div>\r\n            </div>\r\n\t\t</footer>\r\n\r\n\r\n        </div>\r\n    )\r\n    }\r\n}\r\nexport default Form;","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './Form.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Form/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}